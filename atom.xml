<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YRHULKのBlog</title>
  
  <subtitle>追求源于热爱</subtitle>
  <link href="http://yrhulk.github.io/atom.xml" rel="self"/>
  
  <link href="http://yrhulk.github.io/"/>
  <updated>2022-04-18T09:17:08.294Z</updated>
  <id>http://yrhulk.github.io/</id>
  
  <author>
    <name>YRHULK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yrhulk.github.io/2022/04/09/hello-world/"/>
    <id>http://yrhulk.github.io/2022/04/09/hello-world/</id>
    <published>2022-04-09T11:35:56.104Z</published>
    <updated>2022-04-18T09:17:08.294Z</updated>
    
    <content type="html"><![CDATA[<p>This is a new strat!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a new strat!&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSP2019 格雷码</title>
    <link href="http://yrhulk.github.io/2019/11/16/CSP2019-D1-T1/"/>
    <id>http://yrhulk.github.io/2019/11/16/CSP2019-D1-T1/</id>
    <published>2019-11-16T11:45:32.000Z</published>
    <updated>2019-11-16T04:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>$CSP 2019, Day1$ 退役祭</p><blockquote><p>十年$OI$一场空，<br>不开$long ,long$见祖宗。<br>本觉$long,long$已经够，<br>$unsigned,long, long$忘脑后。</p></blockquote><p>&amp;emsp;以上今日真实写照&#x3D; &#x3D;&#x2F;&#x2F;</p><span id="more"></span><p>&amp;emsp;我是真的不知道T1我考场写了个啥子玩意，在想些啥子东西，反正当我看见 $\le 2^{63}-1$ 和 $2^{64}$ 的时候竟然认为是同一个东西？？？然后<del>顺理成章</del>的忘记了$unsigned, long, long$ $95pts$ 滚粗(ノ｀Д)ノ</p><p>&amp;emsp;然后回到该题就是一个类似二分(?)的思路吧，转换题目，以此与 $2^i$ 相比较，判断为 $0$ 还是 $1$，同时记录该段区间内的顺序（正序或逆序）即可。<br><img src="https://pic.superbed.cn/item/5dcfdd218e0e2e3ee9785f49.jpg"><br>&amp;emsp;举个栗子 $n&#x3D;3,k&#x3D;5$ 时，将 $k$ 与 $2^i$ 进行比较，若大于则为右半区间，则其顺序为逆序，标记即可，以此类推即可，详见代码实现，可读性应该还行 $QwQ$，由于太弱，代码较长看看就好</p><p>&amp;emsp;以下是代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;<span class="number">1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, flag;</span><br><span class="line">ull k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%llu&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">ull p = <span class="number">1ull</span> &lt;&lt; i;</span><br><span class="line"><span class="keyword">if</span> (k &gt;= p) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k &gt;= p) k -= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&amp;emsp;顺便放一个考场 $95pts$ 的辣鸡代码，细节啥的别在意，太弱了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, flag, ans;</span><br><span class="line"><span class="type">int</span> p[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">freopen</span> (<span class="string">&quot;code.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span> (<span class="string">&quot;code.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">n = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = p[i - <span class="number">1</span>] * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (k &gt;= p[n - <span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>), flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>), flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (k - p[n - <span class="number">1</span>] &gt;= <span class="number">0</span>) k -= p[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &gt;= p[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k - p[i] &gt;= <span class="number">0</span>) k -= p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;$CSP 2019, Day1$ 退役祭&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;十年$OI$一场空，&lt;br&gt;不开$long ,long$见祖宗。&lt;br&gt;本觉$long,long$已经够，&lt;br&gt;$unsigned,long, long$忘脑后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;amp;emsp;以上今日真实写照&amp;#x3D; &amp;#x3D;&amp;#x2F;&amp;#x2F;&lt;/p&gt;</summary>
    
    
    
    <category term="算法解析" scheme="http://yrhulk.github.io/categories/%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="模拟" scheme="http://yrhulk.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>CF429D Tricky Function</title>
    <link href="http://yrhulk.github.io/2019/10/16/CF429D/"/>
    <id>http://yrhulk.github.io/2019/10/16/CF429D/</id>
    <published>2019-10-16T11:40:16.000Z</published>
    <updated>2019-11-14T16:42:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;CF429D Tricky Function</p><p>&amp;emsp;LG <a href="https://www.luogu.org/problem/CF429D">传送门</a></p><span id="more"></span><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>&amp;emsp;给定序列 $a<a href="https://www.luogu.org/problem/P4145">1</a>, a[2], …, a[n]$<br>&amp;emsp;函数 $f(i, j) &#x3D; (i - j)^2 + (a[i+1] + a[i+2] + … + a[j])^2$<br>&amp;emsp;求 $f$ 的最小值</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h1><p>#$1$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>#$2$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h1><p>#$1$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>#$2$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h1><p>&amp;emsp;&amp;emsp;$n ≤ 100000, -10000 \le a[i] \le 10000$</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>&amp;emsp;对题目稍作转化：</p><p>&amp;emsp;用 $sum[i]$ 来表示前缀和</p><p>&amp;emsp;$f(i,j)&#x3D;(j-i)^2+(sum[j]-sum[i])^2$</p><p>&amp;emsp;如果把 $(i,sum[i])$ 看作第 i 个点，$f(i,j)$就是 $i,j$ 两点的距离的平方。</p><p>&amp;emsp;问题变成了平面上的 $n$ 个点，求最近点对。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;v[maxn], temp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s: s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpx</span> <span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpy</span> <span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a.x - b.x, <span class="number">2</span>) + <span class="built_in">pow</span>(a.y - b.y, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (l + <span class="number">1</span> == r) <span class="keyword">return</span> <span class="built_in">dis</span>(v[l], v[r]);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">min</span>(<span class="built_in">calc</span>(l, mid), <span class="built_in">calc</span>(mid + <span class="number">1</span>, r));</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pow</span>(v[mid].x - v[i].x, <span class="number">2</span>) &lt; d) temp[++k] = v[i];</span><br><span class="line">    <span class="built_in">sort</span>(temp + <span class="number">1</span>, temp + k + <span class="number">1</span>, cmpy);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pow</span>(temp[i].y - temp[j].y, <span class="number">2</span>) &gt;= d) <span class="keyword">break</span>;</span><br><span class="line">            d = <span class="built_in">min</span>(d, <span class="built_in">dis</span>(temp[i], temp[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="built_in">read</span>();</span><br><span class="line">        v[i].x = i, v[i].y += v[i - <span class="number">1</span>].y + a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v + <span class="number">1</span>, v + n + <span class="number">1</span>, cmpx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">calc</span>(<span class="number">1</span>, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;CF429D Tricky Function&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;LG &lt;a href=&quot;https://www.luogu.org/problem/CF429D&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法解析" scheme="http://yrhulk.github.io/categories/%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="分治" scheme="http://yrhulk.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="最近点对" scheme="http://yrhulk.github.io/tags/%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/"/>
    
  </entry>
  
  <entry>
    <title>关于SPFA的优化</title>
    <link href="http://yrhulk.github.io/2019/10/16/SPFA-SLF/"/>
    <id>http://yrhulk.github.io/2019/10/16/SPFA-SLF/</id>
    <published>2019-10-16T00:12:29.000Z</published>
    <updated>2019-10-16T04:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;总所周知，关于SPFA，它死了。</p><p>&amp;emsp;但它是否真的一无是处？？</p><p>&amp;emsp;或许我们还可以用一些玄学的算法拯救一下死去的SPFA。</p><span id="more"></span><h1 id="啥是SPFA？"><a href="#啥是SPFA？" class="headerlink" title="啥是SPFA？"></a>啥是SPFA？</h1><p>&amp;emsp;$SPFA$ $(Shortest$  $Path$  $Faster$  $Algorithm)$ 是 $Bellman$-$Ford$ 算法的一种队列实现，减少了不必要的冗余计算。 它可以在 $O(kE)$ 的时间复杂度内求出源点到其他所有点的最短路径，可以处理负边。</p><p>&amp;emsp;然而正如我们所知，<strong>在NOI 2018的第一天第一题中，出题人卡了 SPFA 算法，导致 100 分变成 60 分</strong>，所以也就有了下图：</p><p><img src="https://ae01.alicdn.com/kf/H0a5db9c99b8a4569a29cc6d5eeeae90eX.png" alt="NOI2018现场"></p><p>&amp;emsp;然而必要的时候这玩意处理负环还是很不错的，所以我们得来优化一下。</p><h1 id="SPFA-SLF"><a href="#SPFA-SLF" class="headerlink" title="SPFA+SLF"></a>SPFA+SLF</h1><p>&amp;emsp;什么是 $SLF$ ？$SLF$ 优化，即 $Small$ $Label$ $First$  策略，就是使用双端队列，把常规 $SPFA$ 中的普通队列换成双端队列，然后每次插入时和队头比较，如果更优插到队头否则插队尾，这样时间可以优化很多。</p><p>&amp;emsp;$Tip$ : 队列为空时直接插入队尾。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">2147483647</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> next, to, dis;</span><br><span class="line">&#125;e[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, tot;</span><br><span class="line"><span class="type">int</span> head[<span class="number">100010</span>], vis[<span class="number">100010</span>], dis[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line">deque &lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    e[++tot].next = head[x];</span><br><span class="line">    e[tot].to = y;</span><br><span class="line">    e[tot].dis = z;</span><br><span class="line">    head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = inf;</span><br><span class="line">    dis[s] = <span class="number">0</span>, vis[s] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push_back</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop_front</span>();</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="type">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[y] &gt; dis[u] + e[i].dis) &#123;</span><br><span class="line">                dis[y] = dis[u] + e[i].dis;</span><br><span class="line">                <span class="keyword">if</span>(!vis[y]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; dis[y] &gt;= dis[q.<span class="built_in">front</span>()]) q.<span class="built_in">push_back</span>(y);</span><br><span class="line">                    <span class="keyword">else</span> q.<span class="built_in">push_front</span>(y);</span><br><span class="line">                    vis[y] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>(), s = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>(), z = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">add</span>(x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;总所周知，关于SPFA，它死了。&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;但它是否真的一无是处？？&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;或许我们还可以用一些玄学的算法拯救一下死去的SPFA。&lt;/p&gt;</summary>
    
    
    
    <category term="算法解析" scheme="http://yrhulk.github.io/categories/%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="SPFA" scheme="http://yrhulk.github.io/tags/SPFA/"/>
    
    <category term="最短路" scheme="http://yrhulk.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4381 OSU!</title>
    <link href="http://yrhulk.github.io/2019/10/14/bzoj-4318/"/>
    <id>http://yrhulk.github.io/2019/10/14/bzoj-4318/</id>
    <published>2019-10-14T11:23:49.000Z</published>
    <updated>2019-10-15T16:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>$BZOJ 4318$ $OSU!$ （期望 $DP$ ）<br>$Luogu1654$ <a href="https://www.luogu.org/problem/P1654">传送门</a></p><span id="more"></span>  <h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>&amp;emsp;给定一个长度为 $𝑛$ 的 $01$ 串，第 $𝑖$ 个位置为 $1$ 的概率为 $𝑝_𝑖$ ，一个极长的长度为 $x$ 的子串会产生 $x^3$ 的分数，求分数的期望。</p><h1 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h1><p>&amp;emsp;第一行有一个正整数 $n(n \le 10^5)$ ，表示操作个数。接下去 $n$ 行每行有一个 $[0,1]$ 之间的实数，表示每个操作的成功率。</p><h1 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h1><p>&amp;emsp;一个实数，表示答案。答案四舍五入后保留 $1$ 位小数。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">0.5</span> </span><br><span class="line"><span class="number">0.5</span> </span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6.0</span></span><br></pre></td></tr></table></figure><h1 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h1><p>&amp;emsp; $000$ 分数为 $0$，$001$ 分数为 $1$ ，$010$ 分数为 $1$ ，$100$ 分数为 $1$ ，$101$ 分数为 $2$ ，$110$ 分数为 $8$ ，$011$ 分数为 $8$ ，$111$ 分数为 $27$ ，总和为 $48$ ，期望为 $48 \div 8&#x3D;6.0$ </p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>&amp;emsp;一道神奇的 $DP$ 题目，难在转移方程的推理，码量很少。</p><p>&amp;emsp;对于 $f(x) &#x3D; x^3$ ，有 $f(x+1) &#x3D; (x + 1) ^ 3$，即:<br>$$<br>\begin{aligned}<br>f(x + 1);<br>&amp;&#x3D;(x + 1) ^ 3 \<br>&amp;&#x3D;(x+ 1)(x+1)^2 \<br>&amp;&#x3D;(x+1)(x ^ 2 + 2 \cdot x + 1)\<br>&amp;&#x3D; x ^ 3 + 2 \cdot x ^ 2 + x + x ^ 2 + 2 \cdot x + 1 \<br>&amp;&#x3D; x ^ 3 + 3 \cdot x ^ 3 + 3 \cdot x + 1\<br>\end{aligned}<br>$$<br>&amp;emsp;即 $f(x + 1) &#x3D; f(x) + 3 \cdot x^3 + 3 \cdot x + 1$ 。则我们维护这个增加值，用 $f1[x]$ 表示 $x$ 的期望，$f2[x]$ 表示 $x^2$ 的期望，不难得出 ：</p><p>&amp;emsp;$f1[i] &#x3D; (f1[i - 1] + 1) * p[i]$ </p><p>&amp;emsp;$f2[i] &#x3D; (f2[i - 1] + 2 * f1[i - 1] + 1) * p[i]$ </p><p>&amp;emsp;则，$ans[i] &#x3D; ans[i - 1] + (3 * f2[i - 1] + 3 * f1[i - 1] + 1) * p[i]$ ，则最终答案为 $ans[n]$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> ans, p[maxn];</span><br><span class="line"><span class="type">double</span> f1[maxn], f2[maxn], f3[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span> (<span class="string">&quot;%lf&quot;</span>, &amp;p[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f1[i] = (f1[i - <span class="number">1</span>] + <span class="number">1</span>) * p[i];</span><br><span class="line">        f2[i] = (f2[i - <span class="number">1</span>] + <span class="number">2</span> * f1[i - <span class="number">1</span>] + <span class="number">1</span>) * p[i];</span><br><span class="line">        f3[i] = (<span class="number">3</span> * f2[i - <span class="number">1</span>] + <span class="number">3</span> * f1[i - <span class="number">1</span>] + <span class="number">1</span>) * p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans += f3[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1lf\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;$BZOJ 4318$ $OSU!$ （期望 $DP$ ）&lt;br&gt;$Luogu1654$ &lt;a href=&quot;https://www.luogu.org/problem/P1654&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://yrhulk.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="http://yrhulk.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="题解" scheme="http://yrhulk.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3211 花神游历各国</title>
    <link href="http://yrhulk.github.io/2019/10/10/bzoj-3211/"/>
    <id>http://yrhulk.github.io/2019/10/10/bzoj-3211/</id>
    <published>2019-10-10T12:27:49.000Z</published>
    <updated>2022-04-18T08:59:26.241Z</updated>
    
    <content type="html"><![CDATA[<p>$BZOJ 3211$ 花神游历各国（树状数组+并查集）<br>$Luogu$<a href="https://www.luogu.org/problem/P4145">传送门</a></p><span id="more"></span>  <h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>&amp;emsp;给你一个序列，要求支持两种操作<br>&amp;emsp;把区间 $[l,r]$ 内的所有数都开根（向下取整）<br>&amp;emsp;求区间 $[l,r]$ 内所有数的和</p><h1 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h1><p>&amp;emsp;第一行一个整数 $n$，代表数列中数的个数。<br>&amp;emsp;第二行 $n$ 个正整数，表示初始状态下数列中的数。<br>&amp;emsp;第三行一个整数 $m$，表示有 $m$ 次操作。<br>&amp;emsp;接下来 $m$ 行每行三个整数 $k,l,r$，<br>&amp;emsp; $k&#x3D;0$ 表示给 $[l,r]$ 中的每个数开平方(下取整)<br>&amp;emsp; $k&#x3D;1$ 表示询问 $[l,r]$ 中各个数的和。<br>&amp;emsp;<strong>数据中有可能 $l&gt;r$ ，需要交换 $l$ 和 $r$。</strong></p><h1 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h1><p>&amp;emsp;对于询问操作，每行输出一个回答。</p><h1 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h1 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h1><p>&amp;emsp;对于 $30%$ 的数据，$1\le n,m\le 1000$，数列中的数不超过 $32767$。<br>&amp;emsp;对于 $100%$的数据，$1 \le n,m \le 100000$, $1 \le l,r \le$，数列中的数大于 $0$，且不超过 $10^{12}$</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>&amp;emsp;不喜欢敲线段树，刚好老师上课讲了该题的树状数组+并查集的解法，便自己动手捣鼓一下。<br>&amp;emsp;首先，单点修改求区间和可以用树状数组实现，因为开平方很耗时间，所以在这个方面可以优化，我们知道，开平方开几次之后数字就会等于 $1$ ，所以，用数组记录下一个应该开的数，每次直接跳到下一个不是1的数字进行开平方，至于这个数组，可以用并查集维护。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">ll a[maxn], b[maxn], f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) b[i] += x, i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span> <span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) ans += b[i], i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        a[i] = <span class="built_in">read</span>(), <span class="built_in">add</span>(i, a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i;</span><br><span class="line">    m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        ll k = <span class="built_in">read</span>(), l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>) &#123;    </span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                ll t = <span class="built_in">sqrt</span>(a[l]);</span><br><span class="line">                <span class="built_in">add</span>(l, t - a[l]);</span><br><span class="line">                a[l] = t;</span><br><span class="line">                <span class="keyword">if</span> (a[l] &lt;= <span class="number">1</span>) f[l] = l + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> f[l] = l;</span><br><span class="line">                <span class="keyword">if</span> (f[l] == l) l++;</span><br><span class="line">                <span class="keyword">else</span> l = <span class="built_in">find</span>(f[l]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;$BZOJ 3211$ 花神游历各国（树状数组+并查集）&lt;br&gt;$Luogu$&lt;a href=&quot;https://www.luogu.org/problem/P4145&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="http://yrhulk.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="题解" scheme="http://yrhulk.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="树状数组" scheme="http://yrhulk.github.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
    <category term="并查集" scheme="http://yrhulk.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>杭州集训Day6总结</title>
    <link href="http://yrhulk.github.io/2019/10/06/hang-zhou-day6/"/>
    <id>http://yrhulk.github.io/2019/10/06/hang-zhou-day6/</id>
    <published>2019-10-06T07:27:49.000Z</published>
    <updated>2019-10-09T18:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;国庆杭州集训Day6上午考试，一套奇奇怪怪的伪 $USACO$ 的题目，（我也不知道是还没找到原题还是真的老师故意出这种题面），涵盖了数论、$DP$、模运算等内容，考场发挥不佳，故作总结。</p><span id="more"></span>  <h1 id="T1-九九乘法表"><a href="#T1-九九乘法表" class="headerlink" title="T1 九九乘法表"></a>T1 九九乘法表</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>&amp;emsp;奶牛 $Bessie$ 最近在背九九乘法表，但是她发现这张表对她来说实在是太easy了，于是她打算做一张无限大的乘法表。<br>&amp;emsp; $Bessie$ 画了一个无限大的二维表格，然后在第 $i$ 行第 $j$ 列写下了 $i × j$ 的值，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1  2  3  4 …</span><br><span class="line">2  4  6  8 …</span><br><span class="line">3  6  9 12 …</span><br><span class="line">4  8 12 16 …</span><br><span class="line">…  …  …  … </span><br></pre></td></tr></table></figure><p>&amp;emsp; $Bessie$ 知道你已经精通加减乘除，于是她想让你统计这张乘法表上有多少个矩形内部的和为 $S$. 准确地说，请统计满足以第 $a$ 行第 $b$ 列单元格为左上角，以第 $c$ 行第 $d$ 列单元格为右下角的矩形内的数字之和为 $S$ 的四元组 $(a, b, c, d) (a ≤ c, b ≤ d)$ 的个数。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>&amp;emsp;输入仅一行，一个数，表示 $S$.</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>&amp;emsp;一个数，表示符合要求的四元组个数。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><p>#$1$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>#$2$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><p>#$3$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20000518</span><br></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><p>#$1$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>#$2$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>#$3$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">32</span><br></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>&amp;emsp;对于第一组样例，符合要求的四元组一共有 $4$ 个：$(1,1,1,2)$, $(1,1,2,1)$, $(1,3,1,3)$, $(3,1,3,1)$.</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>&amp;emsp;对于 $30%$ 的数据，$1 ≤ S ≤ 100$<br>&amp;emsp;对于 $70%$ 的数据，$1 ≤ S ≤ 10^6$<br>&amp;emsp;对于 $100%$ 的数据，$1 ≤ S ≤ 10^9$</p><h1 id="T1-总结、题解"><a href="#T1-总结、题解" class="headerlink" title="T1 总结、题解"></a>T1 总结、题解</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&amp;emsp;考试的时候没仔细的去推，先是瞎敲了一个 $O(n^4)$ 的暴力枚举，后面仔细想想发现可以利用等差数列来解决，但是也仅仅停留在 $S &#x3D; \frac{(a+c)(c-a+ 1)}{2} \times \frac{(b + d)(d - b + 1)}{2}$，之后便没有想到枚举因子等操作，最终得分$30$分。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>&amp;emsp;在九九乘法表中，不难发现给定的矩形可以有第一行对应的数字之和乘以第一列对应的数字之和，即下图中蓝色矩形数字之和为两个红色矩形数字之和的乘积。<br><img src="https://ae01.alicdn.com/kf/H4051cb316e6b40d8847e1a1444107ae1A.png"><br>&amp;emsp;由于红色部分为公差为 $1$ 的等差数列，不难得出 $S &#x3D; \frac{(a+c)(c-a+ 1)}{2} \times \frac{(b + d)(d - b + 1)}{2}$ ，我们令 $P &#x3D; \frac{(a+c)(c-a+ 1)}{2}$，有 $2P &#x3D; (a+c)(c-a+1)$，则我们可以枚举 $2P$ 的因子 $h$，令 $a + c &#x3D; h$, $c - a + 1 &#x3D; \frac {2P}{h}$，即可解出 $a$, $c$，判断是否是整数且满足 $1 ≤ a ≤ c$ 即可。$Q$ 同理。<br>&amp;emsp;综上，时间复杂度为 $O(S$的因子个数$\times\sqrt S)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, t;</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s: s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">work</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; <span class="number">1ll</span> * i * i &lt;= <span class="number">1ll</span> * p; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> c = p / i + i - <span class="number">1</span>, a = p - c / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (c % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= <span class="number">1</span>) num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;table.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;table.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    s = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= s; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s % i != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        ll num = <span class="number">1ll</span> * <span class="built_in">work</span>(<span class="number">2</span> * i) * <span class="built_in">work</span>(<span class="number">2</span> * s / i);</span><br><span class="line">        ans += num;</span><br><span class="line">        <span class="keyword">if</span> (i * i &lt; s) ans += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T2-电梯调度"><a href="#T2-电梯调度" class="headerlink" title="T2 电梯调度"></a>T2 电梯调度</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>&amp;emsp;$Farmer John$ 有一幢 $H$ 层的大楼，里面有三部电梯。现在我们提前得知了 $n$ 头牛要依次使用电梯通行的消息。<br>&amp;emsp;每条消息都由二元组 $(s, t)(s \ne  t)$ 表示，第 $i$ 条消息 $(s_i, t_i)$ 表示第 $i$ 头牛要从第 $s_i$ 层坐电梯移动到第 $t_i$ 层。并且，当第 $i$ 头牛要乘坐电梯时，一定保证前面的 $(i - 1)$ 头牛都已经到达了各自的目标楼层。<br>&amp;emsp;电梯每移动一层的高度，就需要花费 $1$ 个单位的电量。请你安排一种调度方案，使得三部电梯的耗电量之和最小。<br>&amp;emsp;你的调度方案应当包括两方面的信息：（1）三台电梯的初始位置，这可以是任意楼层。（2）对于每头牛，你都要指定一台电梯来运送他。<br>&amp;emsp;最后你只需要给出最小的耗电量之和即可。</p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h2><p>&amp;emsp;输入第一行，两个整数 $n$ 和 $H$；<br>&amp;emsp;接下来 $n$ 行，每行两个整数 $s_i$ 和 $t_i$。  </p><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><p>&amp;emsp;输出一个数，表示最少的耗电量。  </p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">6 1</span><br><span class="line">3 5</span><br><span class="line">2 4</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h2 id="样例解释-1"><a href="#样例解释-1" class="headerlink" title="样例解释"></a>样例解释</h2><p>&amp;emsp;最佳的调度方案为：第一台电梯初始停在 $6$ 层，第二台电梯初始停在 $3$ 层，第三台电梯初始停在 $2$ 层；第一台电梯运送第 $1$、$4$ 头牛，第二台电梯运送第 $2$ 头牛，第三台电梯运送第 $3$头牛。<br>&amp;emsp;对于第一头牛，第一台电梯把他从 $6$ 楼运到 $1$ 楼，耗费 $5$ 单位电量；<br>&amp;emsp;对于第二头牛，第二台电梯把他从 $3$ 楼运到 $5$ 楼，耗费 $2$ 单位电量；<br>&amp;emsp;对于第三头牛，第三台电梯把他从 $2$ 楼运到 $4$ 楼，耗费 $2$ 单位电量；<br>&amp;emsp;对于第四头牛，第一台电梯从 $1$ 楼移动到 $2$ 楼，再把他从 $2$ 楼运到 $1$ 楼，耗费 $1+1&#x3D;2$ 单位电量；<br>&amp;emsp;一共耗费 $5+2+2+2&#x3D;11$ 单位电量，可以证明这是耗电量之和最小的方案。  </p><h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><p>&amp;emsp;对于 $20%$ 的数据，$1 ≤ n, H ≤ 7$；<br>&amp;emsp;对于 $50%$ 的数据，$1 ≤ n, H ≤ 50$；<br>&amp;emsp;对于 $100%$ 的数据，$1 ≤ n, H ≤ 300, 1 ≤ s_i, t_i ≤ H$.  </p><h1 id="T2-总结、题解"><a href="#T2-总结、题解" class="headerlink" title="T2 总结、题解"></a>T2 总结、题解</h1><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>&amp;emsp;算是一个简单的DP吧，考试的时候脑抽没想到，一直在想最短路之类的诡异算法，最后还没搞出来，草草敲爆搜，卑微至极。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>&amp;emsp;由题易得，因为当第 $i$ 头牛来坐电梯时，前 $i - 1$ 头牛已经到达了各自的目标楼层，故对后面的牛不产生任何影响，于是可以考虑动态规划。我们令 $f[i][j][k][l]$ 表示当前处理到第 $i$ 头牛，第一台电梯停在 $j$ 层，第二台电梯停在 $k$ 层，第三台电梯停在 $l$ 层。当考虑第 $i + 1$ 头牛时，对于若可分配的三台电梯，有：<br>&amp;emsp;第一台电梯： $f[i + 1][t_{i+1}][k][l] &#x3D; f[i][j][k][l] + |j - s_{i+1}| + |s_{i+1} - t_{i+1}|$<br>&amp;emsp;第二台电梯： $f[i + 1][j][t_{i+1}][l] &#x3D; f[i][j][k][l] + |k - s_{i+1}| + |s_{i+1} - t_{i+1}|$<br>&amp;emsp;第三台电梯： $f[i + 1][j][k][t_{i+1}] &#x3D; f[i][j][k][l] + |l - s_{i+1}| + |s_{i+1} - t_{i+1}|$<br>&amp;emsp;可以看到这样状态数有 $O(nH^3)$，转移是 $O(1)$ 的。时间复杂度为 $O(nH^3)$。于是 $50pts$ 到手。<br>&amp;emsp;考虑优化，我们可以注意到在第 $i$ 头牛到达目标楼层之后，一定有一台电梯停在第 $t_i$ 层，所以有一维状态可以去掉。即用 $f[i][j][k]$ 表示当前处理到第 $i$ 头牛，其中一台电梯停在 $j$ 层，一台电梯停在 $k$ 层，另一台电梯停在 $t_i$ 层。则对于第 $i + 1$ 头牛的分配情况，有：<br>&amp;emsp;第一台电梯：$f[i + 1][t_i][k] &#x3D; f[i + 1][k][t_i] &#x3D; f[i][j][k] + |j - s_{i+1}| + |s_{i+1} - t_{i+1}|$<br>&amp;emsp;第二台电梯：$f[i + 1][j][t_i] &#x3D; f[i + 1][t_i][j] &#x3D; f[i][j][k] + |k - s_{i+1}| + |s_{i+1} - t_{i+1}|$<br>&amp;emsp;第三台电梯：$f[i + 1][j][k] &#x3D; f[i + 1][k][j] &#x3D; f[i][j][k] + |t_i - s_{i+1}| + |s_{i+1} - t_{i+1}|$ 。<br>&amp;emsp;这样状态数就优化到了 $O(nH^2)$，转移是 $O(1)$ 的。时间复杂度为 $O(nH^2)$。<br>&amp;emsp;用滚动数组可以把第一维压缩掉，将空间复杂度优化到 $O(H^2)$。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">300</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, h, ans = inf, sum;</span><br><span class="line"><span class="type">int</span> s[maxn], t[maxn], f[<span class="number">2</span>][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s: s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;schedudle.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;schedule.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    n = <span class="built_in">read</span>(), h = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        s[i] = <span class="built_in">read</span>(), t[i] = <span class="built_in">read</span>();</span><br><span class="line">        sum += <span class="built_in">abs</span>(s[i] - t[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n ; i++) &#123;</span><br><span class="line">        <span class="type">int</span> p = (i &amp; <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(f[p ^ <span class="number">1</span>], <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f[p ^ <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span> ; j &lt;= h; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= h; k++) &#123;</span><br><span class="line">                f[p ^ <span class="number">1</span>][j][k] = <span class="built_in">min</span>(f[p ^ <span class="number">1</span>][j][k], f[p][j][k] + <span class="built_in">abs</span>(t[i] - s[i + <span class="number">1</span>]));</span><br><span class="line">                f[p ^ <span class="number">1</span>][t[i]][k] = <span class="built_in">min</span>(f[p ^ <span class="number">1</span>][t[i]][k], f[p][j][k] + <span class="built_in">abs</span>(j - s[i + <span class="number">1</span>]));</span><br><span class="line">                f[p ^ <span class="number">1</span>][j][t[i]] = <span class="built_in">min</span>(f[p ^ <span class="number">1</span>][j][t[i]], f[p][j][k] + <span class="built_in">abs</span>(k - s[i + <span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= h; j++) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, f[n &amp; <span class="number">1</span>][i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans + sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="T3-数字卡片"><a href="#T3-数字卡片" class="headerlink" title="T3 数字卡片"></a>T3 数字卡片</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>&amp;emsp;奶牛 $Bessie$ 收到了 $Farmer John$ 送的一盒由 $0∼9$ 组成的数字卡片。<br>&amp;emsp;$Farmer John$ 想考考 $Bessie$，于是让她用这些数字卡片摆出一个数字，要求：这个数字的长度大于等于 $3$，没有前导零，且任意连续三位组成的数字都是 $3$ 的倍数。比如 $1564$ 就是一个<br>满足要求的数字，因为 $156$ 和 $564$ 都是 $3$ 的倍数。$12$, $015$, $1562$ 就是不满足要求的数字。<br>&amp;emsp;$Bessie$ 很快地解决了这个问题，$Farmer John$ 只好加大问题的难度：用现有的卡片能摆出多少个不同的满足要求的数字？<br>&amp;emsp;$Bessie$ 先统计了一下每一张卡片的个数，用 $c_0$, $c_1$, . . . , $c_9$ 分别来表示数字 $0$, $1$, . . . , $9$ 的个数。接下来，她就来请教你了。请你帮她统计一下答案。  </p><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h2><p>&amp;emsp;输入仅一行，包含〸个数字 $c_0, c_1, . . . , c_9$  </p><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h2><p>&amp;emsp;输出一个数，表示符合要求的数字的个数对 $10^9 + 7$ 取模的结果。  </p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><p>#$1$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure><p>#$2$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1 1 1 1 1 1 1 1 1</span><br></pre></td></tr></table></figure><p>#$3$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><p>#$1$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><p>#$2$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17076</span><br></pre></td></tr></table></figure><p>#$3$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">612513622</span><br></pre></td></tr></table></figure><h2 id="样例解释-2"><a href="#样例解释-2" class="headerlink" title="样例解释"></a>样例解释</h2><p>&amp;emsp;对于第一组样例，符合要求的数一共有 $11$ 个：$102$, $120$, $201$, $210$, $222$, $1021$, $1201$, $2012$, $2102$, $12012$, $21021$.  </p><h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><p>&amp;emsp;对于 $30%$ 的数据，$1 ≤ c0 + c1 + · · · + c9 ≤ 10$；<br>&amp;emsp;对于 $60%$ 的数据，$1 ≤ max{c0, c1, · · · , c9} ≤ 10$；<br>&amp;emsp;对于 $100%$ 的数据，$1 ≤ max{c0, c1, · · · , c9} ≤ 100$.  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;国庆杭州集训Day6上午考试，一套奇奇怪怪的伪 $USACO$ 的题目，（我也不知道是还没找到原题还是真的老师故意出这种题面），涵盖了数论、$DP$、模运算等内容，考场发挥不佳，故作总结。&lt;/p&gt;</summary>
    
    
    
    <category term="习题" scheme="http://yrhulk.github.io/categories/%E4%B9%A0%E9%A2%98/"/>
    
    
    <category term="题解" scheme="http://yrhulk.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="模拟考试" scheme="http://yrhulk.github.io/tags/%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>杭州集训Day5总结</title>
    <link href="http://yrhulk.github.io/2019/10/05/hang-zhou-day5/"/>
    <id>http://yrhulk.github.io/2019/10/05/hang-zhou-day5/</id>
    <published>2019-10-05T07:27:49.000Z</published>
    <updated>2019-10-10T01:19:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;国庆杭州集训Day5上午考试，一套奇奇怪怪的伪 $USACO$ 的题目，（我也不知道是还没找到原题还是真的老师故意出这种题面），涵盖了数论、$DP$、模运算等内容，考场发挥不佳，故作总结。</p><span id="more"></span>  <h1 id="T1-求和"><a href="#T1-求和" class="headerlink" title="T1 求和"></a>T1 求和</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>&amp;emsp;给定两个长度为 $n$ 的数列，有两种操作<br>&amp;emsp;$0$ $x$ $y$ $z$ 表示将 $a$ 数组第 $x$ 个元素修改为 $y$，$b$ 数组第 $x$ 个元素修改为 $z$<br>&amp;emsp;$1$ $l$ $r$ 表示询问 $\sum \limits_{l \le i &lt; j \le r}a_i \times b_j$   </p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>&amp;emsp;第一行两个正整数 $n$,$m$，第二行 $n$ 个数 $a_1,a_2,…,a_n$，第三行 $n$ 个数 $b_1,b_2,…,b_n$<br>&amp;emsp;接下来 $m$ 行，表示 $m$ 次操作  </p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>&amp;emsp;对于每个询问操作，输出答案。  </p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">44</span></span><br></pre></td></tr></table></figure><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>&amp;emsp;对于 $30%$ 的数据，$n, m ≤ 100$<br>&amp;emsp;对于 $50%$ 的数据，$n, m ≤ 4000$<br>&amp;emsp;另有 $20%$ 的数据保证没有修改操作<br>&amp;emsp;另有 $20%$ 的数据保证 $a_i &#x3D; b_i$<br>&amp;emsp;对于 $100%$ 的数据，$n, m ≤ 10^5, 1 \le a_i, b_i \le 10^4$  </p><h1 id="T1-总结、题解"><a href="#T1-总结、题解" class="headerlink" title="T1 总结、题解"></a>T1 总结、题解</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&amp;emsp;</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>&amp;emsp;</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h1 id="T2-武器"><a href="#T2-武器" class="headerlink" title="T2 武器"></a>T2 武器</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>&amp;emsp;一共有 $n$ 种武器，直接购买成本为 $a_i$。有 $m$ 种合成方法，可以将 $x$,$y$ 两种各一个武器合成一个 $z$ 武器，请问获得第 $n$ 种武器的最小成本和获得最小成本的方案数。</p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h2><p>&amp;emsp;输入的第一行包含两个正整数 $n$，$m$ 表示武器数量和合成方法数量。<br>&amp;emsp;接下来一行包含 $n$ 个正整数，其中 $a_i$ 表示第 $i$ 件物品的成本。<br>&amp;emsp;接下来 $m$ 行每行三个正整数 $x$, $y$ , $z$，表示可以将一个 $x$, $y$ 合为一个 $z$。<br>&amp;emsp;最后一行输入一个整数 $type$，如果 $type&#x3D;0$ 输出最小成本；如果 $type&#x3D;1$ 则输出最小成本和获得最小成本的方案数。</p><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><p>&amp;emsp;如果 $type&#x3D;0$ 输出一个整数，表示获得第 $n$ 种武器的最小成本。<br>&amp;emsp;如果 $type&#x3D;1$ 输出两个整数，分别表示获得第 $n$ 种武器的最小成本和获得最小成本的方案数。</p><h2 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">7</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>&amp;emsp;第一种情况：用 $4$、$5$ 合成 $1$，再用 $1$、$2$ 合成 $7$<br>&amp;emsp;第二种情况：用 $4$、$5$ 合成 $1$，用 $3$、$6$ 合成 $2$，再用 $1$、$2$ 合成 $7$<br>&amp;emsp;第三种情况：只用一个物品 $7$<br>&amp;emsp;这三种情况合成物品 $7$ 的成本均为 $10$。</p><h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><p>&amp;emsp;对于 $20%$ 的数据， $n \le 10,m \le 20$；<br>&amp;emsp;对于 $60%$ 的数据， $n \le 500,m \le 1000$；<br>&amp;emsp;对于 $100%$ 的数据， $n \le 5 \times 10^4, m \le 10^5; a_i \le 2 \times 10^8$;<br>&amp;emsp;对于每部分的数据，有一半 $type&#x3D;0$，一半 $type&#x3D;1$。</p><h1 id="T2-总结、题解"><a href="#T2-总结、题解" class="headerlink" title="T2 总结、题解"></a>T2 总结、题解</h1><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h1 id="T3-棋盘"><a href="#T3-棋盘" class="headerlink" title="T3 棋盘"></a>T3 棋盘</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h2><p>&amp;emsp;给定一个$n\times m(n,m&gt;1)$的棋盘，从左下角 $(1,1)$ 走到右上角 $(n,m)$。每次只能向右或向上走。其中有 $k$ 个棋子，要求不能经过这 $k$ 个棋子。棋盘上还存在一条河流，满足 $y-x&#x3D;m-t(1&lt;&#x3D;t&lt;&#x3D;m)$,不能跨过这条河流（可以经过）。请问方案数为多少。  </p><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h2><p>&amp;emsp;第一行包含四个正整数 $n$, $m$, $k$, $t$ 表示迷宫的大小、棋子的个数、河流的位置。<br>&amp;emsp;接下来的 $k$ 行，每行有两个正整数 $x_i$, $y_i$ 表示棋子的位置(保证起点终点不存在棋子)  </p><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h2><p>&amp;emsp;输出一个整数，表示方案数。（答案可能很大，要求答案对 $10^9 + 7$ 取模）  </p><h2 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> </span><br></pre></td></tr></table></figure><h2 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><p>&amp;emsp;对于 $20%$ 的数据， $n,m,t,k \le 10$；<br>&amp;emsp;对于 $40%$ 的数据， $n,m,t,k \le 1000$；<br>&amp;emsp;另有 $20%$ $k &#x3D; 0$<br>&amp;emsp;另有 $20%$ $t &#x3D; 1$<br>&amp;emsp;对于 $100%$ 的数据， $n,m,t \le 10^6; k \le 10^4$;  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;国庆杭州集训Day5上午考试，一套奇奇怪怪的伪 $USACO$ 的题目，（我也不知道是还没找到原题还是真的老师故意出这种题面），涵盖了数论、$DP$、模运算等内容，考场发挥不佳，故作总结。&lt;/p&gt;</summary>
    
    
    
    <category term="习题" scheme="http://yrhulk.github.io/categories/%E4%B9%A0%E9%A2%98/"/>
    
    
    <category term="题解" scheme="http://yrhulk.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="模拟考试" scheme="http://yrhulk.github.io/tags/%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>动态规划基本类型总结</title>
    <link href="http://yrhulk.github.io/2019/07/29/dp/"/>
    <id>http://yrhulk.github.io/2019/07/29/dp/</id>
    <published>2019-07-29T08:15:32.000Z</published>
    <updated>2019-07-30T23:32:22.000Z</updated>
    
    
    
    
    <category term="算法解析" scheme="http://yrhulk.github.io/categories/%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="动态规划" scheme="http://yrhulk.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>07.29考试总结</title>
    <link href="http://yrhulk.github.io/2019/07/29/07-29-kao-shi/"/>
    <id>http://yrhulk.github.io/2019/07/29/07-29-kao-shi/</id>
    <published>2019-07-29T00:15:32.000Z</published>
    <updated>2019-08-22T16:31:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;$2019$年$7$月$29$日模拟考，考后总结。</p><span id="more"></span><h2 id="数列游戏"><a href="#数列游戏" class="headerlink" title="数列游戏"></a>数列游戏</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>&amp;emsp;给定一个长度为 $n$ 的序列 $A_i$ ，从中任意删除若干个数字，试求删除数字后能够满足 $A_i&#x3D;i$ 的数量。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>&amp;emsp;第一行输入一个整数 $n$<br>&amp;emsp;第二行 $n$ 个整数，第 $i$ 个数表示 $A_i$</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>&amp;emsp;一行，一个整数，表示擦掉某些数后，最后剩下的数列中最多能有多少个数满足 $A_i&#x3D;i$。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 1 2 5 4</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="说明-amp-提示"><a href="#说明-amp-提示" class="headerlink" title="说明 &amp; 提示"></a>说明 &amp; 提示</h3><p>删除第 $2$ 个数字，有 $A_1&#x3D;1,A_2&#x3D;2,A_4&#x3D;4$ ，共 $3$ 个<br>对于$20%$的数据，$n≤20$;<br>对于$60%$的数据，$n≤100$;<br>对于$100%$的数据，$n≤l000$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"><span class="type">int</span> f[maxn], a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == j) </span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="公交车路线"><a href="#公交车路线" class="headerlink" title="公交车路线"></a>公交车路线</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>&amp;emsp;现有一个环型公路 $A,B,C,D,E,F,G,H$ ，公交车从 $A$ 出发，经过 $n$ 次转移后到达 $E$ ，中途不能到达 $E$ ，且每次只能转移到相邻的车站，试求总方案数。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行一个整数 $n$</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行一个整数，表示总方案数，答案对 $1000007$ 取模</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>&amp;emsp;存在以下 8 种方案<br>$A→B→C→D→C→D→E\<br>A→B→C→B→C→D→E\<br>A→B→A→B→C→D→E\<br>A→H→A→B→C→D→E\<br>A→H→G→F→G→F→E\<br>A→H→G→H→G→F→E\<br>A→H→A→H→G→F→E\<br>A→B→A→H→G→F→E$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mo = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, num, ans;</span><br><span class="line"><span class="type">int</span> f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>() / <span class="number">2</span>;</span><br><span class="line">f[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">f[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; i++) </span><br><span class="line">f[i] = (<span class="number">4</span> * f[i - <span class="number">1</span>] % mo - <span class="number">2</span> * f[i - <span class="number">2</span>] % mo + mo) % mo;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n] * <span class="number">2</span> % mo);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;$2019$年$7$月$29$日模拟考，考后总结。&lt;/p&gt;</summary>
    
    
    
    <category term="习题" scheme="http://yrhulk.github.io/categories/%E4%B9%A0%E9%A2%98/"/>
    
    
    <category term="题解" scheme="http://yrhulk.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="模拟考试" scheme="http://yrhulk.github.io/tags/%E6%A8%A1%E6%8B%9F%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>最短路径算法介绍</title>
    <link href="http://yrhulk.github.io/2019/07/28/zui-duan-lu/"/>
    <id>http://yrhulk.github.io/2019/07/28/zui-duan-lu/</id>
    <published>2019-07-28T00:15:32.000Z</published>
    <updated>2019-07-30T23:31:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;对于一张连通图，两点间有路径联通，其中权值和最小的路径即为这两点间的最短路径，最短路算法便是解决此类路径的算法。</p><span id="more"></span><p>&amp;emsp;如下图，点 $1$ 到点 $4$ 的最短路径即为 $7$，$1 \to 5 \to 3 \to 4$，那么如何求解？下面将介绍三种关于求解最短路的算法。<br><img src="https://ae01.alicdn.com/kf/H038a0c491f11418585f021a20e02f3a7C.png"></p><h1 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h1><h2 id="什么是Floyd"><a href="#什么是Floyd" class="headerlink" title="什么是Floyd"></a>什么是Floyd</h2><p>&amp;emsp;Floyd算法是计算图中任意两点的最短路，其本质为动态规划，时间复杂度为 $O(n^3)$。</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>&amp;emsp;对于点 $i$ 与点 $j$，我们可以用 $f[i][j]$ 来表示 $i$ 到 $j$之间的最短路径, 对于已有的最短路中, 若存在一点 $k$ 使得 $f[i][k] + f[k][j] &lt; f[i][j]$, 则 $f[i][j]$ 的最短路可更新为 $f[i][k] + f[k][j]$, 对此, 我们可以在 $O(n^3)$ 的时间内, 通过枚举 $i, j, k$ 来得出全图的最短路径。其转移方程可写作如下<br>$$f[i][j] &#x3D; \min_{1\le k \le n}(f[i][k] + f[k][j])$$</p><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>&amp;esp;我们先预处理题目给出的边,未相连的边初值为 $inf$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span> ; k &lt;= n; k++) </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n; i++) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) </span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][k] + f[k][j]);</span><br></pre></td></tr></table></figure><h2 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h2><p><a href="https://www.luogu.org/problem/P2910">洛谷 P2910 寻宝之路</a><br>&amp;emsp;给定一条路径，每段路径有一个危险值，求路径上危险值之和最小为多少。（Floyd模板题）</p><h1 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h1><h2 id="什么是Dijkstra"><a href="#什么是Dijkstra" class="headerlink" title="什么是Dijkstra"></a>什么是Dijkstra</h2><p>&amp;emsp; $Dijkstra$ 算法是用来计算一个点到另外所有点的最短路算法，即单源最短路算法，时间复杂度上限为$O(n^2)$(朴素)，在实际应用中较为稳定；加上堆优化之后更是具有 $O((n+m)\log_{2}n)$ 的时间复杂度,在稠密图中有不俗的表现。</p><h2 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示"></a>代码展示</h2><p>&amp;emsp;下面给出堆优化的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, s, tot;</span><br><span class="line"><span class="type">int</span> head[maxn], vis[maxn], dis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> to, next, dis;</span><br><span class="line">&#125;edge[maxn * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">priority_queue &lt; pair &lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    edge[++tot].next = head[x];</span><br><span class="line">    edge[tot].to = y;</span><br><span class="line">    edge[tot].dis = z;</span><br><span class="line">    head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s&lt;&lt;<span class="number">3</span>) + (s&lt;&lt;<span class="number">1</span>) + (ch^<span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        dis[i] = inf;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();   </span><br><span class="line">        <span class="keyword">if</span> (vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = edge[i].next) &#123;</span><br><span class="line">            <span class="type">int</span> a = edge[i].to, b = edge[i].dis;</span><br><span class="line">            <span class="keyword">if</span> (dis[a] &gt; dis[x] + b) &#123;</span><br><span class="line">                dis[a] = dis[x] + b;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-dis[a], a));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>(), s = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>(), z = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">add</span>(x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板题-1"><a href="#模板题-1" class="headerlink" title="模板题"></a>模板题</h2><p><a href="https://www.luogu.org/problem/P3371">洛谷 P3371【模板】单源最短路径（弱化版）</a><br><a href="https://www.luogu.org/problem/P4779">洛谷 P4779【模板】单源最短路径（标准版）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;对于一张连通图，两点间有路径联通，其中权值和最小的路径即为这两点间的最短路径，最短路算法便是解决此类路径的算法。&lt;/p&gt;</summary>
    
    
    
    <category term="算法解析" scheme="http://yrhulk.github.io/categories/%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="SPFA" scheme="http://yrhulk.github.io/tags/SPFA/"/>
    
    <category term="最短路" scheme="http://yrhulk.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    <category term="Dijkstra" scheme="http://yrhulk.github.io/tags/Dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>动态规划——背包问题</title>
    <link href="http://yrhulk.github.io/2019/07/27/bei-bao/"/>
    <id>http://yrhulk.github.io/2019/07/27/bei-bao/</id>
    <published>2019-07-27T00:02:44.000Z</published>
    <updated>2022-04-18T09:00:51.738Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;距离$NOIP2019$仅剩下百余天，故以此总结一些必要算法，也算是补坑了</p><span id="more"></span><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><p>&amp;emsp;背包问题基本问题为：给你 $n$ 件物品和一个容量为 $v$ 的背包。第 $i$ 件物品的费用是 $c[i]$，价值是 $w[i]$, 即装入第 $i$ 件物品消耗 $c[i]$ 的容积，收益为 $w[i]$。求解将哪些物品装入背包可使价值总和最大。</p><h2 id="一、01背包问题"><a href="#一、01背包问题" class="headerlink" title="一、01背包问题"></a>一、01背包问题</h2><h3 id="模型简介"><a href="#模型简介" class="headerlink" title="模型简介"></a>模型简介</h3><p>&amp;emsp;01背包最基本的背包模型，即：<strong>每种物品仅有一件，可以选择取或者不取</strong>。</p><h3 id="模型分析"><a href="#模型分析" class="headerlink" title="模型分析"></a>模型分析</h3><p>&amp;emsp;对于转移的状态，用 $f[i][j]$ 表示前表示前 $i$ 件物品恰放入一个容量为 $v$ 的背包可以获得的最大价值。则其状态转移方程便是：<br>$$f[i][j] &#x3D; max{f[i - 1][j], f[i - 1][j - c[i]] + w[i]}$$<br>&amp;emsp;简单解读这个转移方程，为了获取当前状态 $f[i][j]$ 的最优值，考虑从前面的状态进行转移，对于第 $i$ 个物品，显然只有选或不选两种情况存在，$f[i-1][j]$  即是不选的情况，此时背包所装的容量不变，无需增加收益。而对于后一种状态，则是将第 $i$ 个物品装进背包的情况，由于当前的耗费的容量为 $j$ 且当前装进物品的代价为 $w[i]$ ，那么就应该从耗费容量为 $j−w[i]$ 处开始向当前状态转移。<br>&amp;emsp;由此转移方程就不难写出该模型的代码了:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = v; j &gt;= c[i]; j--) </span><br><span class="line">        f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - c[i]] + w[i]);</span><br></pre></td></tr></table></figure><h3 id="优化空间"><a href="#优化空间" class="headerlink" title="优化空间"></a>优化空间</h3><p>&amp;emsp;以上方法的时间和空间复杂度均为 $O(N*V)$ ，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到 $O(V)$。<br>&amp;emsp;我们看到转移方程：$f[i][j] &#x3D; max{f[i - 1][j], f[i - 1][j - c[i]] + w[i]}$，不难发现在转移过程中，仅与第 $i$ 项与 $i-1$ 项有关系，于是我们可以考虑去掉数组的一维，以此来节省空间，代码如下，复杂度降至 $O(v)$：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>  j = v; j &gt;= c[i]; j--) </span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - c[i]] + w[i]);</span><br></pre></td></tr></table></figure><h3 id="模板题："><a href="#模板题：" class="headerlink" title="模板题："></a>模板题：</h3><p><a href="https://www.luogu.org/problem/P1048">洛谷 P1048 采药</a><br><a href="https://www.luogu.org/problem/P1049">洛谷 P1049 装箱问题</a>　　<br><a href="https://www.luogu.org/problem/P2639">洛谷 P2639 Bessie的体重问题</a></p><h2 id="二、完全背包模型"><a href="#二、完全背包模型" class="headerlink" title="二、完全背包模型"></a>二、完全背包模型</h2><h3 id="模型简介-1"><a href="#模型简介-1" class="headerlink" title="模型简介"></a>模型简介</h3><p>&amp;emsp;同样是背包的基础模型，与 $01$ 背包模型不同的是，完全背包模型中物品都可以<strong>取无限次</strong>。</p><h3 id="模型分析。"><a href="#模型分析。" class="headerlink" title="模型分析。"></a>模型分析。</h3><p>&amp;emsp;状态设计与01背包相同，我们直接考虑转移:<br>$$f[i][v]&#x3D;max{f[i-1][v-k<em>c[i]]+k</em>w[i] | 0 \le k*c[i] \le v}$$<br>&amp;emsp;由此转移方程就不难写出该模型的代码了:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = v; j &gt;= c[i]; j--) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= j / c[i]; k++) </span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * c[i]] + k * w[i]);</span><br></pre></td></tr></table></figure><h3 id="复杂度分析与优化"><a href="#复杂度分析与优化" class="headerlink" title="复杂度分析与优化"></a>复杂度分析与优化</h3><p>&amp;emsp;不难从上面呢的代码中发现，这种处理完全背包的方式的时间复杂度为 $O(nV)$ ，但与01背包不同的是，完全背包还存在一个常数 $O(\frac{V}{c[i]})$ ，并不理想，考虑优化。<br>&amp;emsp;一种方式是删除物品，即对于任意两个物品 $i$，$j$ ，若存在关系 $c[i]&lt;c[j]$ 成立的同时也有 $v[j]&lt;v[i]$ 成立 ，那么物品 $j$ 就可以被删除掉，因为 $j$ 的 “性价比” 更低<br>&amp;emsp;这个优化的预处理复杂度是 $O(n2)$ 的，一般情况下可以接受，且对于随机数据有着较高的效率，但面对刻意设计的数据，极有可能出现一个物品都无法删除的情况，白白浪费了时间。<br>&amp;emsp;另一种优化思路，是先将收益大于 $V$ 的物品去除，在计算出代价相同的物品的最大收益，预处理复杂度 $O(n+V)$<br>&amp;emsp;这两种简单的优化思路思维难度较低，且优化程度不明，均通过预处理来试图降低转移时的枚举量，但是在实际运行中有时并不能时实际运行时间降低，下面将引出两种运用01背包的思路来优化完全背包的方法</p><h4 id="二进制拆分"><a href="#二进制拆分" class="headerlink" title="二进制拆分"></a>二进制拆分</h4><p>&amp;emsp;虽然完全背包每一种物品都能取无限多次，但在背包空间的限制情况下，显然对于第 $i$ 种物品，最多能取 $p &#x3D; \frac{V}{c[i]}$ 次，我们对 $p$ 个物品 $i$ 进行二进制拆分，将其转化为代价为 $2^k×c[i]$ 且收益为 $2^k×w[i]$ 的若干个物品，此时已经将问题从完全背包模型转换为了01背包模型，可套用01背包模型求解</p><h4 id="O-VN-的算法"><a href="#O-VN-的算法" class="headerlink" title="O(VN)的算法"></a>O(VN)的算法</h4><p>&amp;emsp;与01背包的优化类似，现在我们压掉数组的第一维，得到下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = c[i]; j &lt;= v; j++)</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - c[i]] + w[i]);</span><br></pre></td></tr></table></figure><p>&amp;emsp;其转移方程为<br>$$ f[i][j]&#x3D;max{f[i-1][j],,f[i][j-c[i]]+w[i]}$$</p><h3 id="模板题：-1"><a href="#模板题：-1" class="headerlink" title="模板题："></a>模板题：</h3><p><a href="https://www.luogu.org/problem/P2722">洛谷 P2722 总分</a><br><a href="https://www.luogu.org/problem/P1679">洛谷 P1679 神奇的四次方数</a></p><h2 id="三、多重背包模型"><a href="#三、多重背包模型" class="headerlink" title="三、多重背包模型"></a>三、多重背包模型</h2><h3 id="模型简介-2"><a href="#模型简介-2" class="headerlink" title="模型简介"></a>模型简介</h3><p>&amp;emsp;同样是背包的基础模型，与 $01$ 背包模型不同的是，多重背包模型中物品只可以<strong>取有限次</strong>。即物品数量是有限的。</p><h3 id="模型分析。-1"><a href="#模型分析。-1" class="headerlink" title="模型分析。"></a>模型分析。</h3><p>&amp;emsp;这题目和完全背包问题很类似。只需将完全背包问题的方程略微一改即可，因为对于第 $i$ 种物品有 $n[i]+1$种策略：取 $0$ 件，取 $1$ 件……取 $n[i]$ 件。令 $f[i][v]$ 表示前 $i$ 种物品恰放入一个容量为 $v$ 的背包的最大权值，则有状态转移方程：<br>$$f[i][v]&#x3D;max{f[i-1][v-k<em>c[i]]+k</em>w[i] | 0 \le k \le n[i]}$$<br>&amp;emsp;其复杂度为 $O(V*Σn[i])$。:</p><h3 id="优化空间-1"><a href="#优化空间-1" class="headerlink" title="优化空间"></a>优化空间</h3><p>&amp;emsp;类似的，我们同样可以将其空间压缩至一维，得到以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= <span class="number">0</span>; j--) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= c[i]; k++) </span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - a[i] * k] + b[i] * k);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;距离$NOIP2019$仅剩下百余天，故以此总结一些必要算法，也算是补坑了&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://yrhulk.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="动态规划" scheme="http://yrhulk.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="背包" scheme="http://yrhulk.github.io/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>07.18模拟考试总结</title>
    <link href="http://yrhulk.github.io/2019/07/17/07-17-kao-shi/"/>
    <id>http://yrhulk.github.io/2019/07/17/07-17-kao-shi/</id>
    <published>2019-07-17T11:55:45.000Z</published>
    <updated>2019-07-31T00:01:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;今日考试出了这题，被虐的死去活来 <del>(说白了就是不会写)</del> 。在听完讲解后收获颇丰，既然没有题解那就来写 <del>(水)</del> 一篇吧。  </p><span id="more"></span>  <h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>&amp;emsp;$Vasily$有一个栅栏，你可以将它看做由 $n$ 个垂直的木板组成。每个木板的宽为 $1$ 个单位，从左到右第 $i$ 块木板高为 $hi$ 个单位。现在这些木板都是彼此相连构成了一个完整的栅栏。<br>&amp;emsp;由于$Vasily$厌倦了这种布局，他希望将某些木板砍去一部分。要求满足以下限制条件：<br>&amp;emsp;1. 砍去的部分只能是木板的上部。(否则栅栏就立不起来了)<br>&amp;emsp;2. 砍去的部分必须相连（只有上下左右四个方向算相连，左上角等不算相连）。<br>&amp;emsp;3. 每块木板只能砍去整数单位的高度和 $1$ 个单位的宽度。<br>&amp;emsp;4. 不能将某块木板全部砍去，即每块木板至少保留 $1$ 个单位的高度。（这样才能保证剩余的木板依旧能构成一个完整的栅栏）<br>&amp;emsp;现在$Vasily$想知道他有多少种砍的方案。由于这个数可能很大，你需要输出它对 $1000000007$ 取模后的答案。  </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&amp;emsp; 对于题目，由于必须保留一行，我们可以事先将所有的 $h$ 减一，就不要考虑最后一行不能拆的限制了。<br>&amp;emsp; 然后，对于此题，不难看出是一道动态规划问题，由于 $1&lt;&#x3D;n&lt;&#x3D;1000000$ ,我们只能考虑 $O(n)$ 的转移。对于第 $i$ 列 , 如何判断其拆卸的高度？考虑到对于任何一列，只有位于一段中最左端，中间，与最右端，如下图：$l$即左端栅栏，$r$即右端栅栏。<br><img src="https://ae01.alicdn.com/kf/HTB1658EaND1gK0jSZFK763JrVXaf.png">  </p><p>&amp;emsp; 不难得出，当其位于左端时，其可拆除高度仅仅只与本身与下一列的高度的最小值有关，即 $f[l] &#x3D; min(h[l], h[l + 1])$。易得，当其位于中间时， $f[i] &#x3D; min(h[i - 1], h[i], h[i + 1])$ ,右端同理。  </p><p>&amp;emsp; 由此，转移方程则可推出来，我们可用 $f[i][0&#x2F;1]$ 代表该栅栏拆的时候，$0&#x2F;1$表示其后一列是否被拆除，$1$表示其被拆除，$0$表示没有。那么有：<br>&amp;emsp;$f[1][0] &#x3D; h[1];$<br>&amp;emsp;$f[1][1] &#x3D; min(h[1], h[2]);$</p><p>&amp;emsp;而对于余下部分，则可有其位于中间，与位于左端之和得出<br>&amp;emsp;$f[i][1] &#x3D; min(h[i - 1], h[i], h[i + 1]) * f[i - 1][1] + min(h[i], h[i + 1])$<br>&amp;emsp;$f[i][0] &#x3D; min(h[i - 1], h[i]) * f[i - 1][1] + h[i]$<br>&amp;emsp;最终， $ans &#x3D; \sum\limits_{i &#x3D; 1}^{n}f[i][0]$ 。还有对于此题，由于其数据很大，对于模数的处理还需多加小心。<br>&amp;emsp;就这样，愉快的解决了此题，附代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000000</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, ans;</span><br><span class="line"><span class="type">int</span> h[maxn], f[maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">&#x27;-&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) s = (s&lt;&lt;<span class="number">3</span>) + (s&lt;&lt;<span class="number">1</span>) + (ch^<span class="number">48</span>), ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        h[i] = <span class="built_in">read</span>() - <span class="number">1</span>;  <span class="comment">// 预先减去1，方便后续操作</span></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = h[<span class="number">1</span>];</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">min</span>(h[<span class="number">1</span>], h[<span class="number">2</span>]);  <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i][<span class="number">1</span>] = (<span class="number">1ll</span> * <span class="built_in">min</span>(h[i - <span class="number">1</span>], <span class="built_in">min</span>(h[i], h[i + <span class="number">1</span>])) * f[i - <span class="number">1</span>][<span class="number">1</span>] + <span class="built_in">min</span>(h[i], h[i + <span class="number">1</span>])) % mo;</span><br><span class="line">        f[i][<span class="number">0</span>] = (<span class="number">1ll</span> * <span class="built_in">min</span>(h[i - <span class="number">1</span>], h[i]) * f[i - <span class="number">1</span>][<span class="number">1</span>] + h[i]) % mo;   <span class="comment">//转移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans = (ans + f[i][<span class="number">0</span>]) % mo;   <span class="comment">//求和</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;今日考试出了这题，被虐的死去活来 &lt;del&gt;(说白了就是不会写)&lt;/del&gt; 。在听完讲解后收获颇丰，既然没有题解那就来写 &lt;del&gt;(水)&lt;/del&gt; 一篇吧。  &lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://yrhulk.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="动态规划" scheme="http://yrhulk.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="考试" scheme="http://yrhulk.github.io/tags/%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>DP优化————前缀和优化</title>
    <link href="http://yrhulk.github.io/2019/07/17/dp-qian-zhui-he/"/>
    <id>http://yrhulk.github.io/2019/07/17/dp-qian-zhui-he/</id>
    <published>2019-07-17T06:59:13.000Z</published>
    <updated>2019-07-25T19:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;众所周知，动态规划在$NOIP$联赛中占有很重要的比例，而动态规划的优化则成为提升动态规划时间复杂度与空间复杂度的重要方法，近期有幸学习了几个优化方法，写点东西总结一下。</p><span id="more"></span><h2 id="一、前缀和优化"><a href="#一、前缀和优化" class="headerlink" title="一、前缀和优化"></a>一、前缀和优化</h2><p>&amp;emsp;前缀和，顾名思义，即<strong>前面$i$个数的总和</strong>。例如<a href="https://www.luogu.org/problemnew/show/P2679">$NOIP2015$</a>提高组中，子串一题则运用了这种方法。</p><h4 id="NOIP2015-提高组-子串"><a href="#NOIP2015-提高组-子串" class="headerlink" title="$NOIP2015$提高组 子串"></a>$NOIP2015$提高组 子串</h4><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>&amp;emsp;有两个仅包含小写英文字母的字符串$A$和$B$。<br>&amp;emsp;现在要从字符串$A$中取出$k$个互不重叠的非空子串，然后把这$k$个子串按照其在字符串$A$中出现的顺序依次连接起来得到一个新的字符串。请问有多少种方案可以使得这个新串与字符串$B$相等？由于答案可能很大，所以这里要求输出答案对 $1000000007$ 取模的结果。<br>&amp;emsp;注意：子串取出的位置不同也认为是不同的方案。</p><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>&amp;emsp;数据保证 $1≤n≤1000,1≤m≤200,1≤k≤m$。</p><p>&amp;emsp;有两个仅包含小写英文字母的字符串 $A$ 和 $B$。<br>&amp;emsp;现在要从字符串 $A$ 中取出 $k$ 个互不重叠的非空子串，然后把这 $k$ 个子串按照其在字符串 $A$ 中出现的顺序依次连接起来得到一个新的字符串。请问有多少种方案可以使得这个新串与字符串 $B$ 相等？<br>&amp;emsp;注意：子串取出的位置不同也认为是不同的方案。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;众所周知，动态规划在$NOIP$联赛中占有很重要的比例，而动态规划的优化则成为提升动态规划时间复杂度与空间复杂度的重要方法，近期有幸学习了几个优化方法，写点东西总结一下。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://yrhulk.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="动态规划" scheme="http://yrhulk.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="斜率优化" scheme="http://yrhulk.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>写代码的小女孩</title>
    <link href="http://yrhulk.github.io/2019/07/16/the-girl-who-write-code/"/>
    <id>http://yrhulk.github.io/2019/07/16/the-girl-who-write-code/</id>
    <published>2019-07-16T13:56:30.000Z</published>
    <updated>2019-07-30T23:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1Lll0axn1gK0jSZKP760vUXXas.png" alt="undefined"></p><span id="more"></span><p>&amp;emsp;天冷极了，下着雪，又快黑了。这是NOIP的前夜。在这又冷又黑的晚上，一个衣衫破烂的小女孩在机房敲着代码。她从班里逃出来的时候还拿着一本算导，但是有什么用呢？那是一本很破旧的书——那么大，一向是她妈妈垫桌角的。她默写SPFA的时候，年级主任突然冲进机房，吓得她把算导都丢掉了。书叫一个学数竞捡起来拿着跑了。他说，他可以用那本书当草纸，证明切比雪夫定理。小女孩只好自己写二叉堆，一双小脚冻得红一块青一块的。她面前的草纸堆得满满的，上面全是DP转移方程。这一整天，没有一个OJ让她AC一道题，她已经交了32遍采药了。</p><p>&amp;emsp;可怜的小女孩！她又冷又饿，浑身战栗地写着二叉堆。CRT显示器发出的光落在她的枯黄的长头发上，那干枯的头发打成卷儿披在肩上，看上去就像二叉树，不过她没注意这些。每个显示器里都透出光来，机房里飘着一股CPU发糊的怪味，因为这是NOIP前夜——她可忘不了这个。 她在主函数前面停了下来，蜷着趴在键盘上。她觉得更冷了。她不敢回家，因为她还没调完二叉堆，没写对一个DP方程，教练一定会骂她的。再说，换成别的数据结构，一样写不出来。这些题都太水，虽然神犇都写过题解了，但是题解上一般都只有三个字：傻X题。 　　</p><p>&amp;emsp;她几乎绝望了。啊，哪怕一个函数不会RE，对她也是有好处的！她每写一遍程序，跑出来的结果就不一样，要是她有数据，她就知道哪一个程序是算对了的。她得不到数据了，因为机房上不去网了，全校的网速都让隔壁的年级主任拿来下小电影了。如果能保证下一个程序能AC，她就敢再写几十KB的代码，但是她是不敢啊，她怕又算出来一个奇葩的结果来。 　　</p><p>&amp;emsp;她新建了一个cpp重写了程序。编译通过了了，样例过了。这次，她感觉自己站在IOI的考场中AK。学校的大门上，贴着“我校学生以国际金牌向110周年校庆献礼”的条幅。在班级内的非诚勿扰中，全班男生都给她留了灯。这时候，程序又RE了，她面前只有cmd上的黑底白字。</p><p>&amp;emsp;她又写了一道模拟。这一回，她坐在美丽的二叉堆下。这棵二叉堆，比她在丽洁代码中看到的常数还要小，还要短。眼前是许多优美动人的ASCII码，那些都是她写的程序，各种可爱的指针在跳跃着，满世界都是系统栈，都在向她眨眼睛。小女孩向眼前的系统栈伸出手去。这时候，眼前的ASCII码还在，条幅还在，指针还在，年级主任还是和蔼地微笑着。只见那些代码那些指针越升越高越升越高，最后成了在天空中闪烁的星星。</p><p>&amp;emsp;有一颗星星落下来了，在天空中划出了一道细长的红光。 “有一个什么人快要死了。”小女孩说。唯一疼她的学姐保送之前告诉过她：一颗星星落下来，就有一个灵魂要到上帝那儿去了。她notepad++中又写了一个快排。这一回，她把能用的IDE都用了。学姐出现在亮光里，是那么温和，那么快乐。 “学姐！”小女孩叫起来，“啊！请把我带走吧！我知道，系统栈一溢出，您就会不见的，像那校门的条幅，浮点数的精度，循环队列的空间一个样，就会不见的！”她赶紧编译了5KB的高精度模板，要把学姐留住。一大把程序发出强烈的光，把机房照得跟白天一样明亮。学姐从来没有像现在这样温柔，这样美丽。她把小女孩抱起来，搂在怀里。她们俩在光明和快乐中飞走了，越飞越高，飞到那没有DP，没有图论，也没有数据结构的地方去了。第二天清晨，这个小女孩坐在机房里，两腮通红，嘴上带着微笑。她死了，在NOIP的前夜死了。NOIP Day1的太阳升起来了，照在她小小的尸体上。小女孩坐在那儿，显示器上还有一坨编译过的代码。“她想好好复习复赛。”人们说。谁也不知道她曾经看到过多么美丽的东西，她曾经多么幸福，跟着她学姐一起走向新世界的幸福中去。</p><blockquote><p>星星之火，终将成燎原之势</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/HTB1Lll0axn1gK0jSZKP760vUXXas.png&quot; alt=&quot;undefined&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://yrhulk.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="心得" scheme="http://yrhulk.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
    <category term="杂项" scheme="http://yrhulk.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>二分图简单介绍</title>
    <link href="http://yrhulk.github.io/2019/07/08/er-fen-tu/"/>
    <id>http://yrhulk.github.io/2019/07/08/er-fen-tu/</id>
    <published>2019-07-08T09:17:15.000Z</published>
    <updated>2019-07-31T00:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;emsp;典型二分图染色的基本操作，此题对学习二分图有很大的帮助，同时因为很多题解对此介绍不太详细，而且有些模拟算法有误，故写此篇，介绍一下二分图及其操作。</p><span id="more"></span><h2 id="什么是二分图"><a href="#什么是二分图" class="headerlink" title="什么是二分图"></a>什么是二分图</h2><blockquote><p>&amp;emsp;二分图又称作二部图，是图论中的一种特殊模型。<br> &amp;emsp;设G&#x3D;(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边（i，j）所关联的两个顶点i和j分别属于这两个不同的顶点集(i in A,j in B)，则称图G为一个二分图。  </p></blockquote><p>&amp;emsp;G&#x3D;(V, E)，其中G代表<strong>图</strong>，V代表这个图的所有<strong>顶点的集合</strong>，E代表这个图所有<strong>连线的集合</strong>。现如今如果能将V这个顶点集分成两个<strong>互不相交</strong>的子集A、B，E这个边集内所有边的两个顶点<strong>分别属于A、B两个子集的话，我们就称这个图为二分图。</strong><br>&amp;emsp;结合下图，相信可以对二分图有一个初步的了解。<br><img src="https://s1.ax1x.com/2018/11/27/FEgkut.png" alt="undefined"></p><h2 id="二分图最大配"><a href="#二分图最大配" class="headerlink" title="二分图最大配"></a>二分图最大配</h2><p>&amp;emsp;在图论中，匹配是指两两没有公共点的边集。<br>&amp;emsp;二分图最大匹配指：给出一个二分图，找一个边数最大的匹配，即选择尽量多的边，使得任意两条选中的边均没有公共点。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;amp;emsp;典型二分图染色的基本操作，此题对学习二分图有很大的帮助，同时因为很多题解对此介绍不太详细，而且有些模拟算法有误，故写此篇，介绍一下二分图及其操作。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hash利器——康托展开</title>
    <link href="http://yrhulk.github.io/2019/03/09/a/"/>
    <id>http://yrhulk.github.io/2019/03/09/a/</id>
    <published>2019-03-09T06:20:28.000Z</published>
    <updated>2019-07-30T23:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近又重新来写神奇的八数码题目，发现中间hash用到了康托展开，于是在百度的帮助下来介绍一下康托展开～</p><span id="more"></span>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int mo = 19260817;</span><br><span class="line"></span><br><span class="line">int n, m, x, y, num;</span><br><span class="line">int a[1000010];</span><br><span class="line">int f[] = &#123;1,1,2,6,24,120,720,5040,40320,362880&#125;;</span><br><span class="line"></span><br><span class="line">inline int read() &#123;</span><br><span class="line">    int s = 0, f = 0;</span><br><span class="line">    char ch = getchar();</span><br><span class="line">    while (!isdigit(ch)) f |= ch == &#x27;-&#x27;, ch = getchar();</span><br><span class="line">    while (isdigit(ch)) s = (s&lt;&lt;3) + (s&lt;&lt;1) + (ch^48), ch = getchar();</span><br><span class="line">    return f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int cantor(int num[], int n) &#123;</span><br><span class="line">    int ans = 0, sum = 0;</span><br><span class="line">    for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">        for (int j = i + 1; j &lt;= n; j++) &#123;</span><br><span class="line">            if (a[i] &gt; a[j]) </span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += sum * f[n - i];</span><br><span class="line">        sum = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans + 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    freopen(&quot;luogu.in&quot;, &quot;r&quot;, stdin);</span><br><span class="line">    n = read();</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        scanf(&quot;%1d&quot;, &amp;a[i]);</span><br><span class="line">    printf(&quot;%d\n&quot;, cantor(a, n));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近又重新来写神奇的八数码题目，发现中间hash用到了康托展开，于是在百度的帮助下来介绍一下康托展开～&lt;/p&gt;</summary>
    
    
    
    
    <category term="康托展开" scheme="http://yrhulk.github.io/tags/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
    
    <category term="算法" scheme="http://yrhulk.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>网络流————最大流问题</title>
    <link href="http://yrhulk.github.io/2019/01/13/zui-da-liu/"/>
    <id>http://yrhulk.github.io/2019/01/13/zui-da-liu/</id>
    <published>2019-01-13T12:42:50.000Z</published>
    <updated>2019-07-30T23:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>1</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">19260817</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> p[<span class="number">10010</span>],vis[<span class="number">10010</span>],e[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> f=<span class="number">0</span>,s=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) f|=ch==<span class="string">&#x27;-&#x27;</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) s=(s&lt;&lt;<span class="number">3</span>)+(s&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    queue &lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    p[s]=s;</span><br><span class="line">    vis[s]=<span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e[x][i] &amp;&amp; !vis[i])&#123;</span><br><span class="line">                p[i]=x;</span><br><span class="line">                vis[i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(i==t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ek</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>(s,t))&#123;</span><br><span class="line">        <span class="type">int</span> d=inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=t;i!=s;i=p[i])</span><br><span class="line">            d=<span class="built_in">min</span>(d,e[p[i]][i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=t;i!=s;i=p[i])&#123;</span><br><span class="line">            e[p[i]][i]-=d;</span><br><span class="line">            e[i][p[i]]+=d;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>(),w=<span class="built_in">read</span>();</span><br><span class="line">        e[u][v]=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ek</span>(<span class="number">1</span>,m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;1&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://yrhulk.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="网络流" scheme="http://yrhulk.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="最大流" scheme="http://yrhulk.github.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>元旦欢乐%你赛解析</title>
    <link href="http://yrhulk.github.io/2018/12/30/yun-dan-huan-le-sai/"/>
    <id>http://yrhulk.github.io/2018/12/30/yun-dan-huan-le-sai/</id>
    <published>2018-12-30T08:56:56.000Z</published>
    <updated>2019-07-30T23:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>戊戌年12月30日夜，大雪纷飞，当日，元旦模拟赛举行…… <del>(编不下去了)</del><br><img src="https://yrhphoto.oss-cn-hangzhou.aliyuncs.com/snow-earth.jpg" alt="undefined" title="校园一角"></p><span id="more"></span>  <h4 id="T1-全民皆兵"><a href="#T1-全民皆兵" class="headerlink" title="T1 全民皆兵"></a>T1 全民皆兵</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>  由于突如其来的外来入侵，地球防卫总部大大放宽了银河战队的选拔条件，现在紧急向全世界选拔银河战士来保卫地球。终于，从世界巡回海选中有n个人脱颖而出，每一个人都有一个较高的战斗值。地球防卫总部要求在最后选出来的人中任何两个人都必须是没有一点关系的（包括亲戚关系），这样才能保证在战场上每位战士都能心无杂念地奋勇杀敌。可恰恰不幸的是，在这n个人当中，有某一些人具有一些很遥远的亲戚关系，比如A的父亲的父亲的父亲的父亲（……）与B的母亲的母亲的母亲的母亲（……）是夫妻，那么就说A与B有亲戚关系。再说明白点，比如A和B有亲戚关系，B和C有亲戚关系，那么A和C就有亲戚关系（算法也太清晰了吧……）。而现在地球防卫总部急想在1秒钟的时间内知道这n个人能组成多大的军队以及在保证人数最大的情况下的军队的最大战斗力（指军队中每个战士的战斗值之和）是多少，所以就把这个任务叫给了号称“编程天才”的你来解决。  </p><h5 id="输入说明"><a href="#输入说明" class="headerlink" title="输入说明"></a>输入说明</h5><p>第一行一个数n；（30%的数据n&lt;&#x3D;10；100%的数据n&lt;&#x3D;300000；）<br>第二行n个数，第i个数表示第i战士的战斗值；<br>接下来若干行(行数&lt;&#x3D;n)，每行两个数Ai和Bi，表示Ai和Bi两位战士具有微妙的亲戚关系。<br>输入数据保证不出现Ai&#x3D;Bi的情况，但一种情况多次出现是允许的，谁叫他们两太亲呢！<br>答案保证在longint范围内。  </p><h5 id="输出说明"><a href="#输出说明" class="headerlink" title="输出说明"></a>输出说明</h5><p>共两行，每行一个数；<br>第一行为最大军队人数；<br>第二行为军队的最大战斗力。  </p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">291</span> <span class="number">2306</span> <span class="number">668</span> <span class="number">2710</span> <span class="number">1524</span> <span class="number">1318</span> <span class="number">602</span> <span class="number">2991</span> <span class="number">2881</span> <span class="number">2951</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="number">9</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10440</span></span><br></pre></td></tr></table></figure><h4 id="T2-通讯线路"><a href="#T2-通讯线路" class="headerlink" title="T2 通讯线路"></a>T2 通讯线路</h4><h5 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h5><p>某地区共有n座村庄，每座村庄的坐标用一对整数(x, y)表示，现在要在村庄之间建立通讯网络。通讯工具有两种，分别是需要铺设的普通线路和卫星设备。卫星设备数量有限，只能给k个村庄配备卫星设备。拥有卫星设备的村庄互相间直接通讯；铺设了线路的村庄之间也可以通讯。卫星分配是不受限制的。<br>问怎样合理的分配卫星和铺设线路，使得在保证每两座村庄之间都可以直接或间接地通讯的前提下，铺设线路的总长度最短。</p><h5 id="输入说明-1"><a href="#输入说明-1" class="headerlink" title="输入说明"></a>输入说明</h5><p>第一行两个数：n，k（0≤k≤n≤2000）</p><p>接下来n行，每行两个整数(x,y)数描述一个村庄。（-10000≤x,y≤10000）</p><h5 id="输出说明-1"><a href="#输出说明-1" class="headerlink" title="输出说明"></a>输出说明</h5><p>仅一行，代表总长度，精确到0.0001</p><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span> <span class="number">8</span></span><br><span class="line"><span class="number">137</span> <span class="number">824</span></span><br><span class="line"><span class="number">761</span> <span class="number">14</span></span><br><span class="line"><span class="number">68</span> <span class="number">151</span></span><br><span class="line"><span class="number">194</span> <span class="number">758</span></span><br><span class="line"><span class="number">149</span> <span class="number">138</span></span><br><span class="line"><span class="number">314</span> <span class="number">90</span></span><br><span class="line"><span class="number">809</span> <span class="number">404</span></span><br><span class="line"><span class="number">964</span> <span class="number">877</span></span><br><span class="line"><span class="number">471</span> <span class="number">66</span></span><br><span class="line"><span class="number">177</span> <span class="number">546</span></span><br><span class="line"><span class="number">73</span> <span class="number">977</span></span><br><span class="line"><span class="number">397</span> <span class="number">560</span></span><br><span class="line"><span class="number">928</span> <span class="number">653</span></span><br><span class="line"><span class="number">199</span> <span class="number">486</span></span><br><span class="line"><span class="number">736</span> <span class="number">44</span></span><br><span class="line"><span class="number">985</span> <span class="number">801</span></span><br><span class="line"><span class="number">621</span> <span class="number">509</span></span><br><span class="line"><span class="number">444</span> <span class="number">140</span></span><br><span class="line"><span class="number">88</span> <span class="number">508</span></span><br><span class="line"><span class="number">556</span> <span class="number">327</span></span><br></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1355.4195</span></span><br></pre></td></tr></table></figure><h4 id="T3-墙壁粉刷"><a href="#T3-墙壁粉刷" class="headerlink" title="T3 墙壁粉刷"></a>T3 墙壁粉刷</h4><h5 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h5><p>现在需要粉刷一列墙壁，墙壁被分成n段，为了节约用钱，科学家决定只粉刷其中一些段，同是为了美观，科学家要求每连续的m段墙壁中至少有两块被粉刷，现在已知粉刷每一段墙壁的费用。科学家要你帮他求出最少的费用。</p><h5 id="输入说明-2"><a href="#输入说明-2" class="headerlink" title="输入说明"></a>输入说明</h5><p>第一行，n和m（2&lt;&#x3D;n &lt;&#x3D;10000，2&lt;&#x3D;m&lt;&#x3D;100）</p><p>第二行，n个非负整数，第i个数为粉刷第ｉ段的费用。（费用&lt;&#x3D;10000）</p><h5 id="输出说明-2"><a href="#输出说明-2" class="headerlink" title="输出说明"></a>输出说明</h5><p>一行，最小费用。</p><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">10</span> <span class="number">1</span> <span class="number">7</span> <span class="number">8</span> <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;戊戌年12月30日夜，大雪纷飞，当日，元旦模拟赛举行…… &lt;del&gt;(编不下去了)&lt;/del&gt;&lt;br&gt;&lt;img src=&quot;https://yrhphoto.oss-cn-hangzhou.aliyuncs.com/snow-earth.jpg&quot; alt=&quot;undefined&quot; title=&quot;校园一角&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://yrhulk.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="并查集" scheme="http://yrhulk.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="2018" scheme="http://yrhulk.github.io/tags/2018/"/>
    
    <category term="最小生成树" scheme="http://yrhulk.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>NOIP2008提高组——双栈队列</title>
    <link href="http://yrhulk.github.io/2018/11/27/TG2008-shuan-zhan-dui-lie/"/>
    <id>http://yrhulk.github.io/2018/11/27/TG2008-shuan-zhan-dui-lie/</id>
    <published>2018-11-27T08:59:09.000Z</published>
    <updated>2019-07-30T23:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>典型二分图染色的基本操作，此题对学习二分图有很大的帮助，同时因为很多题解对此介绍不太详细，而且有些模拟算法有误，故写此篇，介绍一下二分图及其操作。</p><span id="more"></span>  <h2 id="什么是二分图"><a href="#什么是二分图" class="headerlink" title="什么是二分图"></a>什么是二分图</h2><blockquote><p>二分图又称作二部图，是图论中的一种特殊模型。<br>设G&#x3D;(V,E)是一个无向图，如果顶点V可分割为两个互不相交的子集(A,B)，并且图中的每条边（i，j）所关联的两个顶点i和j分别属于这两个不同的顶点集(i in A,j in B)，则称图G为一个二分图。  </p></blockquote><p>G&#x3D;(V, E)，其中G代表<strong>图</strong>，V代表这个图的所有<strong>顶点的集合</strong>，E代表这个图所有<strong>连线的集合</strong>。现如今如果能将V这个顶点集分成两个<strong>互不相交</strong>的子集A、B，E这个边集内所有边的两个顶点<strong>分别属于A、B两个子集的话，我们就称这个图为二分图。</strong><br>结合下图，相信可以对二分图有一个初步的了解。<br><img src="https://s1.ax1x.com/2018/11/27/FEgkut.png" alt="undefined"></p><h2 id="什么是染色"><a href="#什么是染色" class="headerlink" title="什么是染色"></a>什么是染色</h2><p>就是给对象标记一种“颜色”，其主要作用是便于分类，而不是实现真正意义上的染色。<br>故我们可以创建一个数组，每个数组的下标对应一个元素，数组的每个元素的值代表该对象标记的颜色。如此，就完成了染色这一步骤。<br>我们可以通过建立二维数组e[MAX][MAX]来实现二分图。二维数组的横向代表A顶点子集，纵向代表B顶点子集。如若两个顶点i,j有连接，则在对应的e[i][j] 与 e[j][i]处赋值为1。<br>我们可以通过dfs进行染色验证，判断其是否为二分图。  </p><p><strong>二分图的条件</strong>：通过深度优先搜索对每个顶点进行染色，如果相邻顶点颜色相同或者是同一顶点出现染不同颜色的情况，则说明该图不是二分图。</p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>此题题意还是很明确的，通过两个栈来进行排序操作，并且找出最小值。<br>方法便是<strong>二分图染色</strong>。对数字串进行两个两个逐次遍历，如果符合规则的便将二者连接起来，则当遍历结束后完成构图。然后通过dfs染色，确立真正的二分图。然后借助染色表(记录每个元素颜色的数组)，进行相应的push(), pop()操作，最终便能完成排序。具体规则如下：</p><blockquote><p>对于任意两个数t[i]和t[j],它们不能压入同一个栈中的充要条件: 存在一个k,使得i&lt;j&lt;k且t[k]&lt;t[i]&lt;t[j]。</p></blockquote><p><strong>证明</strong> ：利用反证法，假设当这t[i]，t[j]压入了同一个栈，那么压入t[k]，因为t[k]&lt;t[i]&lt;t[j]，显然，当t[k]没有被弹出的时候，另两个数也都不能被弹出，否则不符题意。而又因t[j]总是会在t[i]之前弹出，但t[j]&gt;t[i]，矛盾，所以假设不成立。<br>由此，我们便可根据这些来解决此题了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1004</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf=<span class="number">19260817</span>;</span><br><span class="line"><span class="type">int</span> n,num;</span><br><span class="line"><span class="type">int</span> color[maxn];</span><br><span class="line"><span class="type">int</span> t[maxn];    <span class="comment">//要排序的元素的存储</span></span><br><span class="line"><span class="type">int</span> s[maxn];    <span class="comment">//判断两个数字是否满足规则</span></span><br><span class="line"><span class="type">bool</span> flag,e[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;    <span class="comment">//DFS进行染色</span></span><br><span class="line">    color[x]=c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[x][i])&#123;    <span class="comment">//查找相邻点 </span></span><br><span class="line">            <span class="keyword">if</span>(color[i]==c) flag=<span class="literal">false</span>;     <span class="comment">//若相邻点颜色相同，则错误</span></span><br><span class="line">            <span class="keyword">if</span>(!color[i]) <span class="built_in">paint</span>(i,<span class="number">3</span>-c);     <span class="comment">//若未染过色，对其染色，3-c结果为1,2，表示1与2号栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;    <span class="comment">//创造二分图</span></span><br><span class="line">    s[n+<span class="number">1</span>]=inf;     </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">        s[i]=t[i];</span><br><span class="line">        <span class="keyword">if</span>(s[i+<span class="number">1</span>]&lt;s[i])</span><br><span class="line">            s[i]=s[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[i]&lt;t[j] &amp;&amp; s[j+<span class="number">1</span>]&lt;t[i])&#123;</span><br><span class="line">                e[i][j]=e[j][i]=<span class="number">1</span>;  <span class="comment">//按规则创建图</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123; </span><br><span class="line">        <span class="keyword">if</span>(!color[i])&#123;      <span class="comment">//染色</span></span><br><span class="line">            <span class="built_in">paint</span>(i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;        </span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack1,stack2;</span><br><span class="line">    <span class="type">int</span> now=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(color[i]==<span class="number">1</span>)&#123;    <span class="comment">//入栈</span></span><br><span class="line">            stack1.<span class="built_in">push</span>(t[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a &quot;</span>);            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            stack2.<span class="built_in">push</span>(t[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;c &quot;</span>);               </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>((!stack1.<span class="built_in">empty</span>() &amp;&amp; stack1.<span class="built_in">top</span>()==now) || </span><br><span class="line">              (!stack2.<span class="built_in">empty</span>() &amp;&amp; stack2.<span class="built_in">top</span>()==now))&#123;  <span class="comment">//判断是否弹出</span></span><br><span class="line">            <span class="keyword">if</span>(!stack1.<span class="built_in">empty</span>() &amp;&amp; stack1.<span class="built_in">top</span>()==now)&#123;</span><br><span class="line">                stack1.<span class="built_in">pop</span>();</span><br><span class="line">                now++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;b &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                stack2.<span class="built_in">pop</span>();</span><br><span class="line">                now++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;d &quot;</span>);                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    flag=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">make</span>();</span><br><span class="line">    <span class="built_in">work</span>();   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;典型二分图染色的基本操作，此题对学习二分图有很大的帮助，同时因为很多题解对此介绍不太详细，而且有些模拟算法有误，故写此篇，介绍一下二分图及其操作。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://yrhulk.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="2008" scheme="http://yrhulk.github.io/tags/2008/"/>
    
    <category term="提高组" scheme="http://yrhulk.github.io/tags/%E6%8F%90%E9%AB%98%E7%BB%84/"/>
    
    <category term="二分图" scheme="http://yrhulk.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
</feed>
